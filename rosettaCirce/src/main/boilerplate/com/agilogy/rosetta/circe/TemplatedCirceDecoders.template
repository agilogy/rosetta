package com.agilogy.rosetta.circe

import com.agilogy.rosetta.meta.Meta
import com.agilogy.rosetta.meta.Meta.Attribute
import io.circe.Decoder

trait TemplatedCirceDecoders {  self: CirceMetaProtocol.type =>

  private def mcd[A](a: Attribute[A]): Decoder[A] = {
    val baseDecoder = metaDecoder[A](a.meta)
    a match {
      case Attribute.Mandatory(_)                 => baseDecoder
      case Attribute.WithDefault(_, defaultValue) => Decoder.decodeOption(baseDecoder).map(_.getOrElse(defaultValue))
    }
  }

  def recordMetaDecoder[A](meta: Meta.Record[A]): Decoder[A] = meta match {
    [#case m @ Meta.Record1(_, [#a0#]) => Decoder.forProduct1([#a0.name#])(m.build)([#mcd(a0)#])#
    ]
  }

}
