package com.agilogy.rosetta.circe

import com.agilogy.rosetta.meta.Meta
import com.agilogy.rosetta.meta.Meta.Attribute
import io.circe.Decoder

trait RecordCirceDecoders {

  def am[A: Decoder](attribute: Attribute[A]): Decoder[A] = attribute match {
    case Attribute.Mandatory(_) => Decoder[A]
    case Attribute.WithDefault(_, defaultValue) => Decoder.decodeOption(Decoder[A]).map(_.getOrElse(defaultValue))
  }

  implicit def record1CirceDecoder[A0, A](implicit meta: Meta.Record1[A0, A], d0: Decoder[A0]): Decoder[A] =
    Decoder.forProduct1(meta.attribute0.name)(meta.build)(am(meta.attribute0))

  [2..22#implicit def record1CirceDecoder[[#A0#], A](
    implicit meta: Meta.Record1[[#A0#], A],
    [#d0: Decoder[A0]#]
  ): Decoder[A]=
    Decoder.forProduct1(
      [#meta.attribute0.name#]
    )(
      meta.build
    )(
      [#am(meta.attribute0)#]
    )#

  ]

}
