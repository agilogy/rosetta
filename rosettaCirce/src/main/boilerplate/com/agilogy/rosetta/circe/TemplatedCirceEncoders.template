package com.agilogy.rosetta.circe

import com.agilogy.rosetta.meta.Meta
import com.github.ghik.silencer.silent
import io.circe.Encoder

trait TemplatedCirceEncoders { self: CirceMetaProtocol.type =>

  private def me[A](meta: Meta[A]): Encoder[A] = metaEncoder[A](meta)

  def recordMetaEncoder[A](implicit meta:Meta.Record[A]): Encoder[A] = meta match {
    [#case m @ Meta.Record1(_, [#a0#]) =>
      Encoder.forProduct1([#a0.name#])(m.get)([#me(a0.meta)#])#
    ]
  }

  // https://circe.github.io/circe/codecs/adt.html
  @silent("OptionPartial")
  def unionMetaEncoder[L[_], A](implicit meta: Meta.Union[A], unionCodecConfiguration: UnionCodecConfiguration[A]): Encoder[A] =

      meta match {
        [2..10#case u @ Meta.Union1(_) =>

            Encoder.instance { x =>
              (
                [#u.cast0(x).map(unionCodecConfiguration.discriminate(u.option0.name)(metaEncoder(u.option0)).apply) #orElse
                ]
              ).get
            }#
        ]
      }


}
